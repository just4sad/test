# Import required libraries
import pandas as pd
import dash
import dash_html_components as html
import dash_core_components as dcc
from dash.dependencies import Input, Output
import plotly.express as px

# Read the airline data into pandas dataframe
spacex_df = pd.read_csv("spacex_launch_dash.csv")
max_payload = spacex_df['Payload Mass (kg)'].max()
min_payload = spacex_df['Payload Mass (kg)'].min()

# Create a dash application
app = dash.Dash(__name__)

# Create an app layout
app.layout = html.Div(children=[html.H1('SpaceX Launch Records Dashboard',
                                        style={'textAlign': 'center', 'color': '#503D36',
                                               'font-size': 40}),
                                # TASK 1: Add a dropdown list to enable Launch Site selection
                                # The default select value is for ALL sites
                                # dcc.Dropdown(id='site-dropdown',...)
                                dcc.Dropdown(id='site-dropdown',options=['ALL','CCAFS LC-40','VAFB SLC-4E','KSC LC-39A','CCAFS SLC-40'],
                                placeholder='Select a Launch Site here', searchable=True),
                                html.Br(),

                                # TASK 2: Add a pie chart to show the total successful launches count for all sites
                                # If a specific launch site was selected, show the Success vs. Failed counts for the site
                                html.Div(dcc.Graph(id='success-pie-chart')),
                                html.Br(),

                                html.P("Payload range (Kg):"),
                                # TASK 3: Add a slider to select payload range
                                #dcc.RangeSlider(id='payload-slider',...)
                                dcc.RangeSlider(id='payload-slider',min=0,max=10000,step=1000,value=[min_payload,max_payload]),
                                # TASK 4: Add a scatter chart to show the correlation between payload and launch success
                                html.Div(dcc.Graph(id='success-payload-scatter-chart')),
                                ])

# TASK 2:
# Add a callback function for `site-dropdown` as input, `success-pie-chart` as output
@app.callback([Output(component_id='success-pie-chart',component_property='figure'),
            Output(component_id='success-payload-scatter-chart',component_property='figure')],
        [Input(component_id='site-dropdown',component_property='value'),
        Input(component_id='payload-slider',component_property='value')])

def update_chart(entered_site,payload):
    filterdf = spacex_df
    if entered_site == 'ALL':
        filterdf = filterdf[filterdf['Payload Mass (kg)']<payload[1]]
        filterdf = filterdf[filterdf['Payload Mass (kg)']>payload[0]]
        fig_pie = px.pie(spacex_df,values='class',names='Launch Site')
        fig_scatter = px.scatter(filterdf,x='class',y='Payload Mass (kg)',color='Booster Version Category')
    else:
        filterdf = spacex_df[spacex_df['Launch Site']==entered_site]
        filterdf = filterdf[filterdf['Payload Mass (kg)']<payload[1]]
        filterdf = filterdf[filterdf['Payload Mass (kg)']>payload[0]]
        fig_pie = px.pie(filterdf,names='class',title='portion of success and failure')
        fig_scatter = px.scatter(filterdf,x='class',y='Payload Mass (kg)',color='Booster Version Category')
    return [fig_pie,fig_scatter]
# TASK 4:
# Add a callback function for `site-dropdown` and `payload-slider` as inputs, `success-payload-scatter-chart` as output

# Run the app
if __name__ == '__main__':
    app.run_server()
